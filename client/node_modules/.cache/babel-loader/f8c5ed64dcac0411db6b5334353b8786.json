{"ast":null,"code":"// Action creator functions -> Functions that return objects that are in the correct format that the actions are supposed to be in\nimport UserActionTypes from \"./user.types\"; // We don't need a payload here as the saga will handle all the stuff and this is just for notfying the saga to begin\n\nexport const googleSignInStart = () => ({\n  type: UserActionTypes.GOOGLE_SIGN_IN_START\n}); // Return the user\n\nexport const signInSuccess = user => ({\n  type: UserActionTypes.SIGN_IN_SUCCESS,\n  payload: user\n}); // Return the error if any\n\nexport const signInFailure = error => ({\n  type: UserActionTypes.SIGN_IN_FAILURE,\n  payload: error\n}); // We'll need the email and password for the sign in\n\nexport const emailSignInStart = emailAndPassword => ({\n  type: UserActionTypes.EMAIL_SIGN_IN_START,\n  payload: emailAndPassword\n});\nexport const checkUserSession = () => ({\n  type: UserActionTypes.CHECK_USER_SESSION\n});\nexport const signOutStart = () => ({\n  type: UserActionTypes.SIGN_OUT_START\n});\nexport const signOutSuccess = () => ({\n  type: UserActionTypes.SIGN_OUT_SUCCESS\n});\nexport const signOutFailure = error => ({\n  type: UserActionTypes.SIGN_OUT_FAILURE,\n  payload: error\n});\nexport const signUpStart = userDetails => ({\n  type: UserActionTypes.SIGN_UP_START,\n  payload: userDetails\n});\nexport const signUpSuccess = ({\n  user,\n  additionalData\n}) => ({\n  type: UserActionTypes.SIGN_UP_SUCCESS,\n  payload: {\n    user,\n    additionalData\n  }\n});\nexport const signUpFailure = error => ({\n  type: UserActionTypes.SIGN_UP_FAILURE,\n  payload: error\n});","map":{"version":3,"sources":["/Users/chiragvaswani/Documents/ZTM-Projects/React/crwn-clothing/src/redux/user/user.actions.js"],"names":["UserActionTypes","googleSignInStart","type","GOOGLE_SIGN_IN_START","signInSuccess","user","SIGN_IN_SUCCESS","payload","signInFailure","error","SIGN_IN_FAILURE","emailSignInStart","emailAndPassword","EMAIL_SIGN_IN_START","checkUserSession","CHECK_USER_SESSION","signOutStart","SIGN_OUT_START","signOutSuccess","SIGN_OUT_SUCCESS","signOutFailure","SIGN_OUT_FAILURE","signUpStart","userDetails","SIGN_UP_START","signUpSuccess","additionalData","SIGN_UP_SUCCESS","signUpFailure","SIGN_UP_FAILURE"],"mappings":"AAAA;AACA,OAAOA,eAAP,MAA4B,cAA5B,C,CAEA;;AACA,OAAO,MAAMC,iBAAiB,GAAG,OAAO;AACtCC,EAAAA,IAAI,EAAEF,eAAe,CAACG;AADgB,CAAP,CAA1B,C,CAIP;;AACA,OAAO,MAAMC,aAAa,GAAIC,IAAD,KAAW;AACtCH,EAAAA,IAAI,EAAEF,eAAe,CAACM,eADgB;AAEtCC,EAAAA,OAAO,EAAEF;AAF6B,CAAX,CAAtB,C,CAKP;;AACA,OAAO,MAAMG,aAAa,GAAIC,KAAD,KAAY;AACvCP,EAAAA,IAAI,EAAEF,eAAe,CAACU,eADiB;AAEvCH,EAAAA,OAAO,EAAEE;AAF8B,CAAZ,CAAtB,C,CAKP;;AACA,OAAO,MAAME,gBAAgB,GAAIC,gBAAD,KAAuB;AACrDV,EAAAA,IAAI,EAAEF,eAAe,CAACa,mBAD+B;AAErDN,EAAAA,OAAO,EAAEK;AAF4C,CAAvB,CAAzB;AAKP,OAAO,MAAME,gBAAgB,GAAG,OAAO;AACrCZ,EAAAA,IAAI,EAAEF,eAAe,CAACe;AADe,CAAP,CAAzB;AAIP,OAAO,MAAMC,YAAY,GAAG,OAAO;AACjCd,EAAAA,IAAI,EAAEF,eAAe,CAACiB;AADW,CAAP,CAArB;AAIP,OAAO,MAAMC,cAAc,GAAG,OAAO;AACnChB,EAAAA,IAAI,EAAEF,eAAe,CAACmB;AADa,CAAP,CAAvB;AAIP,OAAO,MAAMC,cAAc,GAAIX,KAAD,KAAY;AACxCP,EAAAA,IAAI,EAAEF,eAAe,CAACqB,gBADkB;AAExCd,EAAAA,OAAO,EAAEE;AAF+B,CAAZ,CAAvB;AAKP,OAAO,MAAMa,WAAW,GAAIC,WAAD,KAAkB;AAC3CrB,EAAAA,IAAI,EAAEF,eAAe,CAACwB,aADqB;AAE3CjB,EAAAA,OAAO,EAAEgB;AAFkC,CAAlB,CAApB;AAKP,OAAO,MAAME,aAAa,GAAG,CAAC;AAAEpB,EAAAA,IAAF;AAAQqB,EAAAA;AAAR,CAAD,MAA+B;AAC1DxB,EAAAA,IAAI,EAAEF,eAAe,CAAC2B,eADoC;AAE1DpB,EAAAA,OAAO,EAAE;AAAEF,IAAAA,IAAF;AAAQqB,IAAAA;AAAR;AAFiD,CAA/B,CAAtB;AAKP,OAAO,MAAME,aAAa,GAAInB,KAAD,KAAY;AACvCP,EAAAA,IAAI,EAAEF,eAAe,CAAC6B,eADiB;AAEvCtB,EAAAA,OAAO,EAAEE;AAF8B,CAAZ,CAAtB","sourcesContent":["// Action creator functions -> Functions that return objects that are in the correct format that the actions are supposed to be in\nimport UserActionTypes from \"./user.types\";\n\n// We don't need a payload here as the saga will handle all the stuff and this is just for notfying the saga to begin\nexport const googleSignInStart = () => ({\n  type: UserActionTypes.GOOGLE_SIGN_IN_START,\n});\n\n// Return the user\nexport const signInSuccess = (user) => ({\n  type: UserActionTypes.SIGN_IN_SUCCESS,\n  payload: user,\n});\n\n// Return the error if any\nexport const signInFailure = (error) => ({\n  type: UserActionTypes.SIGN_IN_FAILURE,\n  payload: error,\n});\n\n// We'll need the email and password for the sign in\nexport const emailSignInStart = (emailAndPassword) => ({\n  type: UserActionTypes.EMAIL_SIGN_IN_START,\n  payload: emailAndPassword,\n});\n\nexport const checkUserSession = () => ({\n  type: UserActionTypes.CHECK_USER_SESSION,\n});\n\nexport const signOutStart = () => ({\n  type: UserActionTypes.SIGN_OUT_START,\n});\n\nexport const signOutSuccess = () => ({\n  type: UserActionTypes.SIGN_OUT_SUCCESS,\n});\n\nexport const signOutFailure = (error) => ({\n  type: UserActionTypes.SIGN_OUT_FAILURE,\n  payload: error,\n});\n\nexport const signUpStart = (userDetails) => ({\n  type: UserActionTypes.SIGN_UP_START,\n  payload: userDetails,\n});\n\nexport const signUpSuccess = ({ user, additionalData }) => ({\n  type: UserActionTypes.SIGN_UP_SUCCESS,\n  payload: { user, additionalData },\n});\n\nexport const signUpFailure = (error) => ({\n  type: UserActionTypes.SIGN_UP_FAILURE,\n  payload: error,\n});\n"]},"metadata":{},"sourceType":"module"}