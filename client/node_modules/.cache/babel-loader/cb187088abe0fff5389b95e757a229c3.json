{"ast":null,"code":"var _jsxFileName = \"/Users/chiragvaswani/Documents/ZTM-Projects/React/crwn-clothing/src/App.js\";\nimport React from \"react\";\nimport \"./App.css\";\nimport { createStructuredSelector } from \"reselect\";\nimport { connect } from \"react-redux\";\nimport { Route, Switch, Redirect } from \"react-router-dom\";\nimport HomePage from \"./pages/homepage/homepage.component\";\nimport ShopPage from \"./pages/shop/shop.component\";\nimport CheckoutPage from \"./pages/checkout/checkout.component\";\nimport SignInAndSignUpPage from \"./pages/sign-in-and-sign-up/sign-in-and-sign-up.component\";\nimport Header from \"./components/header/header.component\";\nimport { setCurrentUser } from \"./redux/user/user.actions\";\nimport { selectCurrentUser } from \"./redux/user/user.selector\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.unsubscribeFromAuth = null;\n  }\n\n  componentDidMount() {// onAuthStateChanged takes a function as a parameter. The parameter of that function is the state of the user on auth or on our application\n    // This connection is always open until the component is unmounted\n    // It establishes a connection between the application anf Firebase\n    // this.unsubscribeFromAuth = auth.onAuthStateChanged(\n    //   async (userAuth) => {\n    //     if (userAuth) {\n    //       const userRef = await createUserProfileDocument(userAuth);\n    //       // Listen to the userRef for the changes in the data. But, we also get the first state of the data which in this case is \"snapShot\"\n    //       userRef.onSnapshot((snapShot) => {\n    //         setCurrentUser({\n    //           id: snapShot.id, // Getting the id from the snapshot\n    //           ...snapShot.data(), // Getting the data from the snapshot\n    //         });\n    //       });\n    //     } else setCurrentUser(userAuth); // Setting the current user to null in the state if the user logs out\n    //   },\n    //   (error) => console.log(error)\n    // );\n  }\n\n  componentWillUnmount() {\n    this.unsubscribeFromAuth(); // closes the subscription\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Switch, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          exact: true,\n          path: \"/\",\n          component: HomePage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/shop\",\n          component: ShopPage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          exact: true,\n          path: \"/checkout\",\n          component: CheckoutPage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          exact: true,\n          path: \"/signin\",\n          render: () => this.props.currentUser ? /*#__PURE__*/_jsxDEV(Redirect, {\n            to: \"/\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 17\n          }, this) : /*#__PURE__*/_jsxDEV(SignInAndSignUpPage, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = createStructuredSelector({\n  currentUser: selectCurrentUser\n}); // dispatch is a way for redux to know that whatever action we're passing to it is an action object that it'll pass to every reducer\n\nconst mapDispatchToProps = dispatch => ({\n  setCurrentUser: user => dispatch(setCurrentUser(user))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","map":{"version":3,"sources":["/Users/chiragvaswani/Documents/ZTM-Projects/React/crwn-clothing/src/App.js"],"names":["React","createStructuredSelector","connect","Route","Switch","Redirect","HomePage","ShopPage","CheckoutPage","SignInAndSignUpPage","Header","setCurrentUser","selectCurrentUser","App","Component","unsubscribeFromAuth","componentDidMount","componentWillUnmount","render","props","currentUser","mapStateToProps","mapDispatchToProps","dispatch","user"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,WAAP;AACA,SAASC,wBAAT,QAAyC,UAAzC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,KAAT,EAAgBC,MAAhB,EAAwBC,QAAxB,QAAwC,kBAAxC;AAEA,OAAOC,QAAP,MAAqB,qCAArB;AACA,OAAOC,QAAP,MAAqB,6BAArB;AACA,OAAOC,YAAP,MAAyB,qCAAzB;AACA,OAAOC,mBAAP,MAAgC,2DAAhC;AAEA,OAAOC,MAAP,MAAmB,sCAAnB;AAEA,SAASC,cAAT,QAA+B,2BAA/B;AACA,SAASC,iBAAT,QAAkC,4BAAlC;;;AACA,MAAMC,GAAN,SAAkBb,KAAK,CAACc,SAAxB,CAAkC;AAAA;AAAA;AAAA,SAChCC,mBADgC,GACV,IADU;AAAA;;AAGhCC,EAAAA,iBAAiB,GAAG,CAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD;;AAEDC,EAAAA,oBAAoB,GAAG;AACrB,SAAKF,mBAAL,GADqB,CACO;AAC7B;;AAEDG,EAAAA,MAAM,GAAG;AACP,wBACE;AAAA,8BACE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,MAAD;AAAA,gCACE,QAAC,KAAD;AAAO,UAAA,KAAK,MAAZ;AAAa,UAAA,IAAI,EAAC,GAAlB;AAAsB,UAAA,SAAS,EAAEZ;AAAjC;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE,QAAC,KAAD;AAAO,UAAA,IAAI,EAAC,OAAZ;AAAoB,UAAA,SAAS,EAAEC;AAA/B;AAAA;AAAA;AAAA;AAAA,gBAFF,eAGE,QAAC,KAAD;AAAO,UAAA,KAAK,MAAZ;AAAa,UAAA,IAAI,EAAC,WAAlB;AAA8B,UAAA,SAAS,EAAEC;AAAzC;AAAA;AAAA;AAAA;AAAA,gBAHF,eAIE,QAAC,KAAD;AACE,UAAA,KAAK,MADP;AAEE,UAAA,IAAI,EAAC,SAFP;AAGE,UAAA,MAAM,EAAE,MACN,KAAKW,KAAL,CAAWC,WAAX,gBACE,QAAC,QAAD;AAAU,YAAA,EAAE,EAAC;AAAb;AAAA;AAAA;AAAA;AAAA,kBADF,gBAGE,QAAC,mBAAD;AAAA;AAAA;AAAA;AAAA;AAPN;AAAA;AAAA;AAAA;AAAA,gBAJF;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAqBD;;AAlD+B;;AAqDlC,MAAMC,eAAe,GAAGpB,wBAAwB,CAAC;AAC/CmB,EAAAA,WAAW,EAAER;AADkC,CAAD,CAAhD,C,CAGA;;AACA,MAAMU,kBAAkB,GAAIC,QAAD,KAAe;AACxCZ,EAAAA,cAAc,EAAGa,IAAD,IAAUD,QAAQ,CAACZ,cAAc,CAACa,IAAD,CAAf;AADM,CAAf,CAA3B;;AAIA,eAAetB,OAAO,CAACmB,eAAD,EAAkBC,kBAAlB,CAAP,CAA6CT,GAA7C,CAAf","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\nimport { createStructuredSelector } from \"reselect\";\nimport { connect } from \"react-redux\";\nimport { Route, Switch, Redirect } from \"react-router-dom\";\n\nimport HomePage from \"./pages/homepage/homepage.component\";\nimport ShopPage from \"./pages/shop/shop.component\";\nimport CheckoutPage from \"./pages/checkout/checkout.component\";\nimport SignInAndSignUpPage from \"./pages/sign-in-and-sign-up/sign-in-and-sign-up.component\";\n\nimport Header from \"./components/header/header.component\";\n\nimport { setCurrentUser } from \"./redux/user/user.actions\";\nimport { selectCurrentUser } from \"./redux/user/user.selector\";\nclass App extends React.Component {\n  unsubscribeFromAuth = null;\n\n  componentDidMount() {\n    // onAuthStateChanged takes a function as a parameter. The parameter of that function is the state of the user on auth or on our application\n    // This connection is always open until the component is unmounted\n    // It establishes a connection between the application anf Firebase\n    // this.unsubscribeFromAuth = auth.onAuthStateChanged(\n    //   async (userAuth) => {\n    //     if (userAuth) {\n    //       const userRef = await createUserProfileDocument(userAuth);\n    //       // Listen to the userRef for the changes in the data. But, we also get the first state of the data which in this case is \"snapShot\"\n    //       userRef.onSnapshot((snapShot) => {\n    //         setCurrentUser({\n    //           id: snapShot.id, // Getting the id from the snapshot\n    //           ...snapShot.data(), // Getting the data from the snapshot\n    //         });\n    //       });\n    //     } else setCurrentUser(userAuth); // Setting the current user to null in the state if the user logs out\n    //   },\n    //   (error) => console.log(error)\n    // );\n  }\n\n  componentWillUnmount() {\n    this.unsubscribeFromAuth(); // closes the subscription\n  }\n\n  render() {\n    return (\n      <div>\n        <Header />\n        <Switch>\n          <Route exact path=\"/\" component={HomePage} />\n          <Route path=\"/shop\" component={ShopPage} />\n          <Route exact path=\"/checkout\" component={CheckoutPage} />\n          <Route\n            exact\n            path=\"/signin\"\n            render={() =>\n              this.props.currentUser ? (\n                <Redirect to=\"/\" />\n              ) : (\n                <SignInAndSignUpPage />\n              )\n            }\n          />\n        </Switch>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = createStructuredSelector({\n  currentUser: selectCurrentUser,\n});\n// dispatch is a way for redux to know that whatever action we're passing to it is an action object that it'll pass to every reducer\nconst mapDispatchToProps = (dispatch) => ({\n  setCurrentUser: (user) => dispatch(setCurrentUser(user)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n"]},"metadata":{},"sourceType":"module"}