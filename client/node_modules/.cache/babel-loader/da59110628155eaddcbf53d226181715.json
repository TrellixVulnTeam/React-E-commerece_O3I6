{"ast":null,"code":"import firebase from \"firebase/app\"; // We can access firestore / auth by using the firebase we imported above\n\nimport \"firebase/firestore\"; // think of this as file paths\n\nimport \"firebase/auth\";\nconst config = {\n  apiKey: \"AIzaSyDWWPA-SMEZHJd0hjlwUxxJrJOKeF6lrPw\",\n  authDomain: \"crwn-db-4352d.firebaseapp.com\",\n  projectId: \"crwn-db-4352d\",\n  storageBucket: \"crwn-db-4352d.appspot.com\",\n  messagingSenderId: \"217903184783\",\n  appId: \"1:217903184783:web:d3302705fe7dcebd8369fa\",\n  measurementId: \"G-99E04047WM\"\n}; // This function is used to store the user's details in the database\n// Async because we're making an API request\n\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return; // Don't do anything if the user has logged out\n\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  console.log(userRef);\n  const snapShot = await userRef.get();\n  console.log(snapShot);\n\n  if (!snapShot.exists) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n    } catch (error) {\n      console.log(\"Error creating the user\", error);\n    }\n  }\n\n  return userRef;\n};\nfirebase.initializeApp(config); // Initialise the application with the above configuration\n// Export the auth and firestore methods\n\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: \"select_account\"\n}); // We want to always trigger the goolge pop up whenever we use google auth provider for authentication and sign in\n\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\nexport default firebase;","map":{"version":3,"sources":["/Users/chiragvaswani/Documents/ZTM-Projects/React/crwn-clothing/src/firebase/firebase.utils.js"],"names":["firebase","config","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","createUserProfileDocument","userAuth","additionalData","userRef","firestore","doc","uid","console","log","snapShot","get","exists","displayName","email","createdAt","Date","set","error","initializeApp","auth","provider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,cAArB,C,CACA;;AACA,OAAO,oBAAP,C,CAA6B;;AAC7B,OAAO,eAAP;AAEA,MAAMC,MAAM,GAAG;AACbC,EAAAA,MAAM,EAAE,yCADK;AAEbC,EAAAA,UAAU,EAAE,+BAFC;AAGbC,EAAAA,SAAS,EAAE,eAHE;AAIbC,EAAAA,aAAa,EAAE,2BAJF;AAKbC,EAAAA,iBAAiB,EAAE,cALN;AAMbC,EAAAA,KAAK,EAAE,2CANM;AAObC,EAAAA,aAAa,EAAE;AAPF,CAAf,C,CAUA;AACA;;AACA,OAAO,MAAMC,yBAAyB,GAAG,OAAOC,QAAP,EAAiBC,cAAjB,KAAoC;AAC3E,MAAI,CAACD,QAAL,EAAe,OAD4D,CACpD;;AAEvB,QAAME,OAAO,GAAGC,SAAS,CAACC,GAAV,CAAe,SAAQJ,QAAQ,CAACK,GAAI,EAApC,CAAhB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYL,OAAZ;AACA,QAAMM,QAAQ,GAAG,MAAMN,OAAO,CAACO,GAAR,EAAvB;AACAH,EAAAA,OAAO,CAACC,GAAR,CAAYC,QAAZ;;AAEA,MAAI,CAACA,QAAQ,CAACE,MAAd,EAAsB;AACpB,UAAM;AAAEC,MAAAA,WAAF;AAAeC,MAAAA;AAAf,QAAyBZ,QAA/B;AACA,UAAMa,SAAS,GAAG,IAAIC,IAAJ,EAAlB;;AAEA,QAAI;AACF,YAAMZ,OAAO,CAACa,GAAR,CAAY;AAChBJ,QAAAA,WADgB;AAEhBC,QAAAA,KAFgB;AAGhBC,QAAAA,SAHgB;AAIhB,WAAGZ;AAJa,OAAZ,CAAN;AAMD,KAPD,CAOE,OAAOe,KAAP,EAAc;AACdV,MAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ,EAAuCS,KAAvC;AACD;AACF;;AACD,SAAOd,OAAP;AACD,CAxBM;AA0BPZ,QAAQ,CAAC2B,aAAT,CAAuB1B,MAAvB,E,CAAgC;AAEhC;;AACA,OAAO,MAAM2B,IAAI,GAAG5B,QAAQ,CAAC4B,IAAT,EAAb;AACP,OAAO,MAAMf,SAAS,GAAGb,QAAQ,CAACa,SAAT,EAAlB;AAEP,MAAMgB,QAAQ,GAAG,IAAI7B,QAAQ,CAAC4B,IAAT,CAAcE,kBAAlB,EAAjB;AACAD,QAAQ,CAACE,mBAAT,CAA6B;AAAEC,EAAAA,MAAM,EAAE;AAAV,CAA7B,E,CAA4D;;AAC5D,OAAO,MAAMC,gBAAgB,GAAG,MAAML,IAAI,CAACM,eAAL,CAAqBL,QAArB,CAA/B;AAEP,eAAe7B,QAAf","sourcesContent":["import firebase from \"firebase/app\";\n// We can access firestore / auth by using the firebase we imported above\nimport \"firebase/firestore\"; // think of this as file paths\nimport \"firebase/auth\";\n\nconst config = {\n  apiKey: \"AIzaSyDWWPA-SMEZHJd0hjlwUxxJrJOKeF6lrPw\",\n  authDomain: \"crwn-db-4352d.firebaseapp.com\",\n  projectId: \"crwn-db-4352d\",\n  storageBucket: \"crwn-db-4352d.appspot.com\",\n  messagingSenderId: \"217903184783\",\n  appId: \"1:217903184783:web:d3302705fe7dcebd8369fa\",\n  measurementId: \"G-99E04047WM\",\n};\n\n// This function is used to store the user's details in the database\n// Async because we're making an API request\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return; // Don't do anything if the user has logged out\n\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  console.log(userRef);\n  const snapShot = await userRef.get();\n  console.log(snapShot);\n\n  if (!snapShot.exists) {\n    const { displayName, email } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData,\n      });\n    } catch (error) {\n      console.log(\"Error creating the user\", error);\n    }\n  }\n  return userRef;\n};\n\nfirebase.initializeApp(config); // Initialise the application with the above configuration\n\n// Export the auth and firestore methods\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\n\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({ prompt: \"select_account\" }); // We want to always trigger the goolge pop up whenever we use google auth provider for authentication and sign in\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\n\nexport default firebase;\n"]},"metadata":{},"sourceType":"module"}