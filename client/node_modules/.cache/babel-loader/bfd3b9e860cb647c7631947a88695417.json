{"ast":null,"code":"import { takeLatest, put, all, call } from \"redux-saga/effects\";\nimport UserActionTypes from \"./user.types\";\nimport { auth, googleProvider, createUserProfileDocument } from \"../../firebase/firebase.utils\";\nimport { signInFailure, signInSuccess } from \"./user.actions\";\nexport function* getSnapshotFromUserAuth(userAuth) {\n  try {\n    const userRef = yield call(createUserProfileDocument, userAuth);\n    const userSnapshot = yield userRef.get();\n    yield put(signInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }) // sending payload\n    );\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n} // We're not using the function to do signInWithPopup from firebase.utils because we need the value that is returned when signInWithPopup is executed\n\nexport function* signInWithGoogle() {\n  try {\n    const {\n      user\n    } = yield auth.signInWithPopup(googleProvider);\n    const userRef = yield call(createUserProfileDocument, user);\n    const userSnapshot = yield userRef.get(); // Dispatch the success action\n\n    yield put(signInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }) // sending payload\n    );\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\nexport function* signInWithEmail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password);\n    const userRef = yield call(createUserProfileDocument, user);\n    console.log(userRef);\n    const userSnapshot = yield userRef.get();\n    yield put(signInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }) // sending payload\n    );\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* onEmailSignInStart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n}\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart)]);\n}","map":{"version":3,"sources":["/Users/chiragvaswani/Documents/ZTM-Projects/React/crwn-clothing/src/redux/user/user.sagas.js"],"names":["takeLatest","put","all","call","UserActionTypes","auth","googleProvider","createUserProfileDocument","signInFailure","signInSuccess","getSnapshotFromUserAuth","userAuth","userRef","userSnapshot","get","id","data","error","signInWithGoogle","user","signInWithPopup","onGoogleSignInStart","GOOGLE_SIGN_IN_START","signInWithEmail","payload","email","password","signInWithEmailAndPassword","console","log","onEmailSignInStart","EMAIL_SIGN_IN_START","userSagas"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,GAArB,EAA0BC,GAA1B,EAA+BC,IAA/B,QAA2C,oBAA3C;AAEA,OAAOC,eAAP,MAA4B,cAA5B;AAEA,SACEC,IADF,EAEEC,cAFF,EAGEC,yBAHF,QAIO,+BAJP;AAKA,SAASC,aAAT,EAAwBC,aAAxB,QAA6C,gBAA7C;AAEA,OAAO,UAAUC,uBAAV,CAAkCC,QAAlC,EAA4C;AACjD,MAAI;AACF,UAAMC,OAAO,GAAG,MAAMT,IAAI,CAACI,yBAAD,EAA4BI,QAA5B,CAA1B;AACA,UAAME,YAAY,GAAG,MAAMD,OAAO,CAACE,GAAR,EAA3B;AACA,UAAMb,GAAG,CACPQ,aAAa,CAAC;AAAEM,MAAAA,EAAE,EAAEF,YAAY,CAACE,EAAnB;AAAuB,SAAGF,YAAY,CAACG,IAAb;AAA1B,KAAD,CADN,CACwD;AADxD,KAAT;AAGD,GAND,CAME,OAAOC,KAAP,EAAc;AACd,UAAMhB,GAAG,CAACO,aAAa,CAACS,KAAD,CAAd,CAAT;AACD;AACF,C,CAED;;AACA,OAAO,UAAUC,gBAAV,GAA6B;AAClC,MAAI;AACF,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMd,IAAI,CAACe,eAAL,CAAqBd,cAArB,CAAvB;AACA,UAAMM,OAAO,GAAG,MAAMT,IAAI,CAACI,yBAAD,EAA4BY,IAA5B,CAA1B;AACA,UAAMN,YAAY,GAAG,MAAMD,OAAO,CAACE,GAAR,EAA3B,CAHE,CAIF;;AACA,UAAMb,GAAG,CACPQ,aAAa,CAAC;AAAEM,MAAAA,EAAE,EAAEF,YAAY,CAACE,EAAnB;AAAuB,SAAGF,YAAY,CAACG,IAAb;AAA1B,KAAD,CADN,CACwD;AADxD,KAAT;AAGD,GARD,CAQE,OAAOC,KAAP,EAAc;AACd,UAAMhB,GAAG,CAACO,aAAa,CAACS,KAAD,CAAd,CAAT;AACD;AACF;AAED,OAAO,UAAUI,mBAAV,GAAgC;AACrC,QAAMrB,UAAU,CAACI,eAAe,CAACkB,oBAAjB,EAAuCJ,gBAAvC,CAAhB;AACD;AAED,OAAO,UAAUK,eAAV,CAA0B;AAAEC,EAAAA,OAAO,EAAE;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT;AAAX,CAA1B,EAA4D;AACjE,MAAI;AACF,UAAM;AAAEP,MAAAA;AAAF,QAAW,MAAMd,IAAI,CAACsB,0BAAL,CAAgCF,KAAhC,EAAuCC,QAAvC,CAAvB;AACA,UAAMd,OAAO,GAAG,MAAMT,IAAI,CAACI,yBAAD,EAA4BY,IAA5B,CAA1B;AACAS,IAAAA,OAAO,CAACC,GAAR,CAAYjB,OAAZ;AACA,UAAMC,YAAY,GAAG,MAAMD,OAAO,CAACE,GAAR,EAA3B;AACA,UAAMb,GAAG,CACPQ,aAAa,CAAC;AAAEM,MAAAA,EAAE,EAAEF,YAAY,CAACE,EAAnB;AAAuB,SAAGF,YAAY,CAACG,IAAb;AAA1B,KAAD,CADN,CACwD;AADxD,KAAT;AAGD,GARD,CAQE,OAAOC,KAAP,EAAc;AACd,UAAMhB,GAAG,CAACO,aAAa,CAACS,KAAD,CAAd,CAAT;AACD;AACF;AAED,OAAO,UAAUa,kBAAV,GAA+B;AACpC,QAAM9B,UAAU,CAACI,eAAe,CAAC2B,mBAAjB,EAAsCR,eAAtC,CAAhB;AACD;AAED,OAAO,UAAUS,SAAV,GAAsB;AAC3B,QAAM9B,GAAG,CAAC,CAACC,IAAI,CAACkB,mBAAD,CAAL,EAA4BlB,IAAI,CAAC2B,kBAAD,CAAhC,CAAD,CAAT;AACD","sourcesContent":["import { takeLatest, put, all, call } from \"redux-saga/effects\";\n\nimport UserActionTypes from \"./user.types\";\n\nimport {\n  auth,\n  googleProvider,\n  createUserProfileDocument,\n} from \"../../firebase/firebase.utils\";\nimport { signInFailure, signInSuccess } from \"./user.actions\";\n\nexport function* getSnapshotFromUserAuth(userAuth) {\n  try {\n    const userRef = yield call(createUserProfileDocument, userAuth);\n    const userSnapshot = yield userRef.get();\n    yield put(\n      signInSuccess({ id: userSnapshot.id, ...userSnapshot.data() }) // sending payload\n    );\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\n\n// We're not using the function to do signInWithPopup from firebase.utils because we need the value that is returned when signInWithPopup is executed\nexport function* signInWithGoogle() {\n  try {\n    const { user } = yield auth.signInWithPopup(googleProvider);\n    const userRef = yield call(createUserProfileDocument, user);\n    const userSnapshot = yield userRef.get();\n    // Dispatch the success action\n    yield put(\n      signInSuccess({ id: userSnapshot.id, ...userSnapshot.data() }) // sending payload\n    );\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\n\nexport function* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\n\nexport function* signInWithEmail({ payload: { email, password } }) {\n  try {\n    const { user } = yield auth.signInWithEmailAndPassword(email, password);\n    const userRef = yield call(createUserProfileDocument, user);\n    console.log(userRef);\n    const userSnapshot = yield userRef.get();\n    yield put(\n      signInSuccess({ id: userSnapshot.id, ...userSnapshot.data() }) // sending payload\n    );\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\n\nexport function* onEmailSignInStart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n}\n\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart)]);\n}\n"]},"metadata":{},"sourceType":"module"}